## ----------------------------------------------------------------------
## Macros 
## ---------------------------------------------------------------------
#macro( attributesAsArguments $attributes )
#set ( $count = 0 )
#set ( $args = "" )
#foreach( $field in $attributes )
#set ( $count = $count + 1 )
#if ( $count > 1 )
#set ( $args = "$args, " )
#end
#set ( $args = "${args}${DOLLAR}${field.name}" )
#end
$args #end
## ----------------------------------------------------------------------
#macro( attributesInComments $attributes )
#set( $i = $attributes.size() - 1 )
#set( $string = "" )
#foreach ( $field in $attributes )
#if ( $field.name != $attributes[$i].name )
#set( $string = $string.concat( "${field.Name} AND " ) )
#else
#set( $string = $string.concat( "${field.Name}" ) )
#end
#end
$string #end
## ----------------------------------------------------------------------
#macro( attributesInFunctionNaming $attributes )
#set( $i = $attributes.size() - 1 )
#set( $string = "" )
#foreach ( $field in $attributes )
#if ( $field.name != $attributes[$i].name )
#set( $string = $string.concat( "_${field.databaseName}_and" ) )
#else
#set( $string = $string.concat( "_${field.databaseName}" ) )
#end
#end
$string #end
## ----------------------------------------------------------------------
#set( $tbl = 'tbl_' + $beanClass.sqlTable )
## ----------------------------------------------------------------------
${LT}#[[?]]#php

class ${beanClass.name}_model extends CI_Model ${LBRACE}
	
	#[[/*]]# TABLE NAME #[[*/]]#
	private ${DOLLAR}$tbl = '${beanClass.sqlTable}';

	#[[/*]]# CONSTRUCTOR #[[*/]]#
	function __construct() ${LBRACE}
		parent::__construct();
	${RBRACE}

	#[[/*]]# LIST ALL ${beanClass.name}s IN DATABASE #[[*/]]#
	function list_all() ${LBRACE}
		${DOLLAR}this->db->order_by( '${beanClass.sqlTable}','asc' );
		return ${DOLLAR}this->db->get( ${DOLLAR}this->$tbl );
	${RBRACE}

	#[[/*]]# GET THE NUMBER OF ${beanClass.name}s IN DATABASE #[[*/]]#
	function count_all() ${LBRACE}
		return ${DOLLAR}this->db->count_all( ${DOLLAR}this->$tbl );
	${RBRACE}

	#[[/*]]# GET ${beanClass.name}s WITH PAGING #[[*/]]#
	function get_paged_list( ${DOLLAR}limit = 10, ${DOLLAR}offset = 0 ) ${LBRACE}
#foreach ( $field in $beanClass.keyAttributes )
${DOLLAR}this->db->order_by( '${field.databaseName}','desc' );
#end
		return ${DOLLAR}this->db->get( ${DOLLAR}this->$tbl, ${DOLLAR}limit, ${DOLLAR}offset );
	${RBRACE}

	#[[/*]]# GET ${beanClass.name}s BY #attributesInComments( $beanClass.KeyAttributes ) #[[*/]]#
	function get_by#attributesInFunctionNaming( $beanClass.keyAttributes ) ( #attributesAsArguments( $beanClass.keyAttributes ) ) ${LBRACE}
#foreach ( $field in $beanClass.keyAttributes )		
${DOLLAR}this->db->where( '${field.databaseName}', ${DOLLAR}${field.name} );
#end
		return ${DOLLAR}this->db->get( ${DOLLAR}this->$tbl );
	${RBRACE}

	#[[/*]]# ADD NEW ${beanClass.name} #[[*/]]#
	function save( ${DOLLAR}${beanClass.sqlTable} ) ${LBRACE}
		${DOLLAR}this->db->insert( ${DOLLAR}this->$tbl, ${DOLLAR}${beanClass.sqlTable} );
	${RBRACE}

	#[[/*]]# UPDATE ${beanClass.name} BY #attributesInComments( $beanClass.KeyAttributes ) #[[*/]]#
	function update( #attributesAsArguments( $beanClass.keyAttributes ), ${DOLLAR}${beanClass.sqlTable} ) ${LBRACE}
#foreach ( $field in $beanClass.keyAttributes )		
${DOLLAR}this->db->where( '${field.databaseName}', ${DOLLAR}${field.name} );
#end
		${DOLLAR}this->db->update( ${DOLLAR}this->$tbl, ${DOLLAR}${beanClass.sqlTable} );
	${RBRACE}

	#[[/*]]# DELETE ${beanClass.name} BY #attributesInComments( $beanClass.KeyAttributes ) #[[*/]]#
	function delete( #attributesAsArguments( $beanClass.keyAttributes ) ) ${LBRACE}
#foreach ( $field in $beanClass.keyAttributes )		
${DOLLAR}this->db->where( '${field.databaseName}', ${DOLLAR}${field.name} );
#end
		${DOLLAR}this->db->delete( ${DOLLAR}this->$tbl );	
	${RBRACE}

${RBRACE}
#[[?]]#${GT}